public static double solve(Point[] p, Point[] q)
{
    if(p.length <= 3)
    {
        return bruteForce(p);
    }

    int middle = p.length / 2;
    Point middlePoint = p[middle];
    Point[] leftPoints = Arrays.copyOfRange(p, 0, p.length / 2);
    Point[] rightPoints = Arrays.copyOfRange(p, p.length / 2, p.length);

    double dl = solve(leftPoints, q);
    double dr = solve(rightPoints, q);
    double d = Math.min(dl, dr);

    ArrayList<Point> stripP = new ArrayList<>();
    ArrayList<Point> stripQ = new ArrayList<>();
    for(int i = 0; i < p.length; i++)
    {
        if(Math.abs(p[i].x - middlePoint.x) < d)
        {
            stripP.add(p[i]);
        }
        if(Math.abs(q[i].x - middlePoint.x) < d)
        {
            stripQ.add(q[i]);
        }
    }
    QuickSort.sort(staticStripQ, 1);

    double minA = Math.min(d, stripClosestP);
    double minB = Math.min(d, stripClosestQ);
    double min = Math.min(minA, minB);

    return min;
}
